/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package cheetah_inekf_lcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class synced_proprioceptive_lcmt implements lcm.lcm.LCMEncodable
{
    public byte num_legs;
    public double timestamp;
    public boolean contact[];
    public float q[];
    public float qd[];
    public float p[];
    public float v[];
    public float tau_est[];
    public float quat[];
    public float rpy[];
    public float omega[];
    public float acc[];
    public long good_packets;
    public long bad_packets;
 
    public synced_proprioceptive_lcmt()
    {
        q = new float[12];
        qd = new float[12];
        p = new float[12];
        v = new float[12];
        tau_est = new float[12];
        quat = new float[4];
        rpy = new float[3];
        omega = new float[3];
        acc = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe5b50cf5e957c239L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(cheetah_inekf_lcm.synced_proprioceptive_lcmt.class))
            return 0L;
 
        classes.add(cheetah_inekf_lcm.synced_proprioceptive_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.num_legs); 
 
        outs.writeDouble(this.timestamp); 
 
        for (int a = 0; a < this.num_legs; a++) {
            outs.writeByte( this.contact[a] ? 1 : 0); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.q[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.qd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.p[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.v[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.tau_est[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.quat[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.rpy[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.omega[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.acc[a]); 
        }
 
        outs.writeLong(this.good_packets); 
 
        outs.writeLong(this.bad_packets); 
 
    }
 
    public synced_proprioceptive_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public synced_proprioceptive_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static cheetah_inekf_lcm.synced_proprioceptive_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        cheetah_inekf_lcm.synced_proprioceptive_lcmt o = new cheetah_inekf_lcm.synced_proprioceptive_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.num_legs = ins.readByte();
 
        this.timestamp = ins.readDouble();
 
        this.contact = new boolean[(int) num_legs];
        for (int a = 0; a < this.num_legs; a++) {
            this.contact[a] = ins.readByte()!=0;
        }
 
        this.q = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.q[a] = ins.readFloat();
        }
 
        this.qd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.qd[a] = ins.readFloat();
        }
 
        this.p = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.p[a] = ins.readFloat();
        }
 
        this.v = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.v[a] = ins.readFloat();
        }
 
        this.tau_est = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.tau_est[a] = ins.readFloat();
        }
 
        this.quat = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.quat[a] = ins.readFloat();
        }
 
        this.rpy = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy[a] = ins.readFloat();
        }
 
        this.omega = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.omega[a] = ins.readFloat();
        }
 
        this.acc = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.acc[a] = ins.readFloat();
        }
 
        this.good_packets = ins.readLong();
 
        this.bad_packets = ins.readLong();
 
    }
 
    public cheetah_inekf_lcm.synced_proprioceptive_lcmt copy()
    {
        cheetah_inekf_lcm.synced_proprioceptive_lcmt outobj = new cheetah_inekf_lcm.synced_proprioceptive_lcmt();
        outobj.num_legs = this.num_legs;
 
        outobj.timestamp = this.timestamp;
 
        outobj.contact = new boolean[(int) num_legs];
        if (this.num_legs > 0)
            System.arraycopy(this.contact, 0, outobj.contact, 0, this.num_legs); 
        outobj.q = new float[(int) 12];
        System.arraycopy(this.q, 0, outobj.q, 0, 12); 
        outobj.qd = new float[(int) 12];
        System.arraycopy(this.qd, 0, outobj.qd, 0, 12); 
        outobj.p = new float[(int) 12];
        System.arraycopy(this.p, 0, outobj.p, 0, 12); 
        outobj.v = new float[(int) 12];
        System.arraycopy(this.v, 0, outobj.v, 0, 12); 
        outobj.tau_est = new float[(int) 12];
        System.arraycopy(this.tau_est, 0, outobj.tau_est, 0, 12); 
        outobj.quat = new float[(int) 4];
        System.arraycopy(this.quat, 0, outobj.quat, 0, 4); 
        outobj.rpy = new float[(int) 3];
        System.arraycopy(this.rpy, 0, outobj.rpy, 0, 3); 
        outobj.omega = new float[(int) 3];
        System.arraycopy(this.omega, 0, outobj.omega, 0, 3); 
        outobj.acc = new float[(int) 3];
        System.arraycopy(this.acc, 0, outobj.acc, 0, 3); 
        outobj.good_packets = this.good_packets;
 
        outobj.bad_packets = this.bad_packets;
 
        return outobj;
    }
 
}

